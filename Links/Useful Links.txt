http://shell-storm.org/shellcode/: Shellcode repo 
https://stackoverflow.com/questions/17775186/buffer-overflow-works-in-gdb-but-not-without-it/17775966#17775966 - BO and gdb (linux) getting correct value for ESP
https://www.reddit.com/r/netsecstudents/comments/6vrfgr/oscp_buffer_overflow_vms_and_help/ - buffer overflow VMs and help
https://electricworry.net/tag/rbash/ - buffer overflow (Rooting Persistence walkthrough)
https://deadliestwebattacks.com/tag/cors/
http://www.abatchy.com/2017/02/oscp-like-vulnhub-vms.html

nmap scripts
https://gist.github.com/audrummer15/7c8c3dc54d5c21d588a7b1ba1b4ef66d

Other software:
http://www.brianlinkletter.com/open-source-network-simulators/ - Prebuilt and make-your-own network simulators
https://sparta.secforce.com/ - python gui of recon scan essentially. auto staging and scripting for identified ports
http://hisham.hm/htop/ - interactive process viewer
DotDotPwn - directory traversal fuzzer
GDB and Evan's Debugger and Immunity - Buffer overflow debugging utilities
https://explainshell.com - put in a shell command and get an explanation (usually from man page)
 quick wget for commands on the fly? : https://explainshell.com/explain?cmd=nmap+-vvv+-sS+-p+1-65535+--max-retries%3D1+-oN+TARGET.txt+IP
http://osintframework.com/
searchdns.netcraft.com and http://toolbar.netcraft.com/site_report?url=


Site references:
https://highon.coffee
https://netsec.ws/?p=337 - spawning tty shell
	https://github.com/j-0-t/staekka - TTY for Metasploit!
http://pastebin.com/raw/0SNSvyjJ - Decent walkthrough of process with tools

Advice:
I also made sure to have a nice page of “quick scripts” that I could copy and paste into a terminal, such as a 
wget powershell script, ftp download script, etc… These were all from techniques I used in the labs.
Windows was also not my strongest privesc platform (as shown by the labs), so I made sure to have a list of 
quick-win checks for privilege escalation on a windows box.
Lesson learned: Have a process, know your process, stick to your process.
Check firewall/IPTable rules (or remove them)

If you’re not familiar with vulnhub.com, check it out. They have a ton of Boot2Root/CTF style vms and some of them are similar to lab machines. Below is a list of vms that were similar to lab machines that I completed while studying for the OSCP:

Kioptrix Level 1
Kioptrix Level 1.1
Kioptrix Level 1.2
Kioptrix2014
pWnOS v2.0
SickOs 1
SickOS 1.2
Stapler
Tr0ll
Tr0ll2
Vulnix
VulnOSv2
FristiLeaks 1.3
LordOfTheRoot 1.0.1
mrRobot
pwnlab_init

TODO:
Define process for Limited Shell, ie:
	Determine rough limits
	Attempt basic limited shell escape (rbash/etc)
	Loot files (define process for what to go after)
		Identify commands that can be used
		Identify applications installed
		Enumerate kernel
		Enumerate groups
		Loot (common):
			/var/www - website files
			/home/user/.ssh - ssh keys
			/etc/ssh - ssh config
		Enumerate all other config files
			'find' commands
		Enumerate directories with rwx access 
		Enumerate files with +s bit
	Privexec 
Define process for Root shell
	Set up persistence
		Add Kali public to /home/user/.ssh/authorized_keys
		Crack usernames/passwords
		Add new user with root privileges
	Enumerate network connections
		During enumeration:
		More creds
		Loot files (define process for what to go after)
	Pivot

Permanent aliases: https://askubuntu.com/questions/1414/how-to-create-a-permanent-alias
	
	
Interesting Ideas:
Firewall port knocking ('knock-knock' ping pattern to open obscured ports [https://leonjza.github.io/blog/2014/10/14/knock-knock-whos-there-solving-knock-knock/])
ICMP (ping) exfiltration a few bytes at a time with the '-p' command [https://electricworry.net/tag/rbash/]
rbash escape using 'nice /bin/bash' (assume it makes rbash run at lower priority than bash)


SSH notes: 
root and default dir for ssh (enterprise often different): /home/<user>/.ssh/
default host keys (public?): /etc/ssh/ssh_host_<ALGORITHM>_key
known_hosts: server fingerprints. advanced MITM, change so user doesn't know MITM warning. 
id_<ALGORITHM> (ie, id_rsa, id_dsa, etc): ssh private key
id_<ALGORITHM>.pub (ie, id_rsa.pub, id_dsa.pub, etc): ssh public key

AUTHORIZED_KEYS
Configures permanent access using SSH keys
Configured separately for each user
Default location: /home/<user>/.ssh/authorized_keys
Default name: authorized_keys or authorized_keys2
Each line contains a SSH public key

ssh-copy-id_
Installs a SSH key on a server as an authorized key.

Check /etc/ssh/sshd_config for interesting locations (ie auth_keys location)